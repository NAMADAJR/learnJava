import os

STRUCTURE_START = "<!-- BEGIN AUTOGENERATED STRUCTURE -->"
STRUCTURE_END = "<!-- END AUTOGENERATED STRUCTURE -->"
LEARNING_START = "<!-- BEGIN LEARNING SECTION -->"
LEARNING_END = "<!-- END LEARNING SECTION -->"

LEARNING_TOPICS = {
    "HelloWorld.java": ("✅ Hello World", "Your first Java program"),
    "Data": ("🔢 Data Types", "Primitives, Strings, Arrays, Enums etc."),
    "Loops": ("🔁 Loops", "For, while, do-while, for-each"),
    "Functions": ("⚙️ Functions", "Methods, arguments, return types"),
    "OOP": ("🧱 OOP", "Classes, inheritance, polymorphism"),
}

def generate_structure(root_dir=".", prefix=""):
    structure = ""
    for item in sorted(os.listdir(root_dir)):
        if item.startswith(".") or item == os.path.basename(__file__):
            continue
        path = os.path.join(root_dir, item)
        if os.path.isdir(path):
            structure += f"{prefix}├── {item}/\n"
            structure += generate_structure(path, prefix + "│   ")
        else:
            structure += f"{prefix}├── {item}\n"
    return structure

def generate_learning_section():
    lines = []
    lines.append("This repository is organized around the major topics you'll encounter when learning Java:\n")
    lines.append("| Topic | Description |")
    lines.append("| ----- | ----------- |")
    for key in sorted(LEARNING_TOPICS):
        topic, desc = LEARNING_TOPICS[key]
        lines.append(f"| {topic} | {desc} |")
    return "\n".join(lines) + "\n"

def replace_between_markers(content, start_marker, end_marker, replacement):
    start = content.find(start_marker)
    end = content.find(end_marker)

    if start == -1 or end == -1 or start > end:
        print(f"Markers not found or out of order: {start_marker}")
        return content

    start += len(start_marker)
    return content[:start] + "\n" + replacement + content[end:]

def update_readme():
    with open("README.md", "r", encoding="utf-8") as f:
        content = f.read()

    structure_md = "```text\n" + generate_structure(".") + "```\n"
    learning_md = generate_learning_section()

    content = replace_between_markers(content, STRUCTURE_START, STRUCTURE_END, structure_md)
    content = replace_between_markers(content, LEARNING_START, LEARNING_END, learning_md)

    with open("README.md", "w", encoding="utf-8") as f:
        f.write(content)

    print("README.md updated with structure and learning section.")

if __name__ == "__main__":
    update_readme()
